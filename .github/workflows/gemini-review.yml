name: 'Gemini AI Code Review'

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Get Pull Request Diff'
        id: get_diff
        run: |
          DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          echo "diff_content<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

     - name: 'Call Gemini for Review'
        id: gemini_review
        run: |
          # Esta nova vers√£o constr√≥i o payload JSON de forma mais segura para evitar
          # erros com caracteres especiais no diff do c√≥digo.
          JSON_PAYLOAD=$(jq -n --arg diff_content "${{ steps.get_diff.outputs.diff_content }}" '{
            "contents": [{
              "parts": [{
                "text": "Voc√™ √© um revisor de c√≥digo s√™nior, especialista em Dart e Flutter. Sua tarefa √© revisar o seguinte diff de um Pull Request.\n\nRegras da revis√£o:\n1. Foque em potenciais bugs, problemas de performance, e desvios das boas pr√°ticas do Flutter (ex: \"const\" em widgets, estado imut√°vel).\n2. Seja conciso e direto.\n3. Se n√£o houver problemas, apenas responda \"O c√≥digo parece bom, nenhuma sugest√£o.\".\n4. Formate sua resposta em Markdown.\n\nAqui est√° o diff para revisar:\n```diff\n" + $diff_content + "\n```"
              }]
            }]
          }')

          API_RESPONSE=$(curl -s -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}")
            
          REVIEW_COMMENT=$(echo "$API_RESPONSE" | jq -r ".candidates[0].content.parts[0].text")
          
          echo "review_comment<<EOF" >> "$GITHUB_OUTPUT"
          echo "$REVIEW_COMMENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: 'Comment on Pull Request'
        uses: actions/github-script@v7
        with:
          script: |
            const reviewComment = `${{ steps.gemini_review.outputs.review_comment }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### ü§ñ Revis√£o de C√≥digo pelo Gemini AI\n\n${reviewComment}`
            });
